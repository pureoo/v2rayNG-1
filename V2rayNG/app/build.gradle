apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion Integer.parseInt("$compileSdkVer")
    buildToolsVersion "$buildToolsVer"

    defaultConfig {
        applicationId "com.v2ray.ang"
        minSdkVersion 17
        targetSdkVersion Integer.parseInt("$targetSdkVer")
        versionCode 29
        versionName "0.1.1"
    }

    signingConfigs {
        release {
            storeFile file("../key.jks")
            keyAlias 'ang'
            keyPassword '123456'
            storePassword '123456'
        }
        debug {
            storeFile file("../key.jks")
            keyAlias 'ang'
            keyPassword '123456'
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"

            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 + android.defaultConfig.versionCode
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(':libv2ray')
    compile project(':dpreference')
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Android support library
    compile "com.android.support:support-v4:$supportLibVersion"
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:cardview-v7:$supportLibVersion"
    compile "com.android.support:preference-v7:$supportLibVersion"

    // DSL
    compile "org.jetbrains.anko:anko-sdk15:$ankoVersion"
    compile "org.jetbrains.anko:anko-support-v4:$ankoVersion"
    compile "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion"
    compile "org.jetbrains.anko:anko-design:$ankoVersion"

    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.pwittchen:reactivenetwork:0.5.1'
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.7.0@aar'
    compile 'de.psdev.licensesdialog:licensesdialog:1.8.1'
    compile 'com.dinuscxj:recycleritemdecoration:1.0.0'
    compile 'io.reactivex:rxkotlin:0.60.0'
    compile 'com.orhanobut:logger:1.15'

    // LeakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4'

    // Firebase
    compile "com.google.firebase:firebase-core:$firebaseVersion"
    compile "com.google.firebase:firebase-crash:$firebaseVersion"

    compile 'me.dm7.barcodescanner:core:1.9.3'
    compile 'me.dm7.barcodescanner:zxing:1.9.3'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
    }
}

